install.packages('reticulate')
reticulate::install_miniconda()
reticulate::install_miniconda(force = TRUE)
reticulate::conda_install('r-reticulate', 'python-kaleido')
reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly')
reticulate::use_miniconda('r-reticulate')
# ROMS example:
# Explore ROMS outputs:
#setwd('C:/Users/moroncog/Documents/DisMELS_Pcod_model')
source('aux_functions.R')
setwd("~/GitHub/PcodIBM_EBS_forecast")
# ROMS example:
# Explore ROMS outputs:
#setwd('C:/Users/moroncog/Documents/DisMELS_Pcod_model')
source('aux_functions.R')
require(ggplot2)
library(ncdf4)
library(plotly)
library(mapdata)
# install.packages('reticulate')
# reticulate::install_miniconda(force = TRUE)
# reticulate::conda_install('r-reticulate', 'python-kaleido')
# reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly')
# reticulate::use_miniconda('r-reticulate')
# Organize depth data:
load('BathyData.RData')
newBathy = newBathy[newBathy$value < 0 & newBathy$value > -300, ]
ak = map_data('worldHires','USA:Alaska')
nc_base = nc_open('Bering_grid_10k.nc')
lon = ncvar_get(nc_base, "lon_rho")
lat = ncvar_get(nc_base, "lat_rho")
bathy = ncvar_get(nc_base, "h")
bathy2 = ifelse(test = bathy == 10, yes = bathy, no = bathy*-1)
# Read all data for one year:
main_folder = 'E:/DisMELS_save_outputs/save_hindcast' # directory where the DisMELS outputs are
mod_year = list.files(path = file.path(main_folder))
j = 10 # choose year
tmpData = read_data_in(eggInclude = FALSE, path = file.path(main_folder, mod_year[j]))
# Filter data for one ID:
sel_id = 54
idData = tmpData[tmpData$id == sel_id, ]
# Make 3D plot:
my_fig = explore_plot_3D(data = idData)
save_image(p = my_fig, file = 'this_fig.png', width = 500, height = 500, scale = 1)
# Make 3D plot:
my_fig = explore_plot_3D(data = idData)
tmp <- tempfile(fileext = ".png")
save_image(my_fig, tmp)
my_fig
tmp <- tempfile(fileext = ".png")
save_image(my_fig, tmp)
file.show(tmp)
reticulate::py_run_string("import sys")
save_image(p, "./pic.png", width = 500, height = 500, scale = 1)
save_image(my_fig, "./pic.png", width = 500, height = 500, scale = 1)
save_image(my_fig, "./pic.png", width = 500, height = 500, scale = 2)
table(tmpData$id, tmpData$typeName)
# Filter data for one ID:
sel_id = c(54, 244)
idData = tmpData[tmpData$id %in% sel_id, ]
idData
idData$id
explore_plot_3D = function(data){
require(plotly)
if('Eggs' %in% data$typeName) {
ini_col = 1
} else {
ini_col = 2
}
colPal = rev(RColorBrewer::brewer.pal(n = 5, name = 'Set1'))[ini_col:5]
# Make plot:
fig = plot_ly(x = lon-360,
y = lat,
z = bathy2)
fig = fig %>% add_surface(showscale = FALSE,
colorscale = list(c(0, 1), c("black",
"white")),
contours = list(
x = list(highlight = FALSE),
y = list(highlight = FALSE),
z = list(highlight = FALSE)
),
hoverinfo = "none")
ids = unique(data$id)
for(i in seq_along(ids)) {
this_data = data[data$id == ids[i], ]
fig = fig %>% add_markers(data = this_data,
x = ~horizPos1,
y = ~horizPos2,
z = ~vertPos,
size = I(80),
color = ~typeName,
alpha = 0.95,
text = ~time2,
hovertemplate = paste(
"<b>%{text}</b><br>",
"lon: %{x:.0}<br>",
"lat: %{y:.0}<br>",
"depth: %{z:.0}<br>")
)
fig = fig %>% add_trace(data = this_data,
x = ~horizPos1,
y = ~horizPos2,
z = ~vertPos,
size = I(2),
type = 'scatter3d',
color = ~typeName,
mode = 'lines',
hoverinfo = "none",
showlegend = FALSE)
}
fig = fig %>% layout(
scene = list(
xaxis = list(title = "longitude", showspikes=FALSE),
yaxis = list(title = "latitude", showspikes=FALSE),
zaxis = list(title = "Depth", showspikes=FALSE,
range = c(-500, 10))
))
return(fig)
}
idData = tmpData[tmpData$id %in% sel_id, ]
# Make 3D plot:
my_fig = explore_plot_3D(data = idData)
my_fig
# Filter data for one ID:
sel_id = c(54, 73)
idData = tmpData[tmpData$id %in% sel_id, ]
# Make 3D plot:
my_fig = explore_plot_3D(data = idData)
my_fig
